generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum for Claim Status
enum ClaimStatus {
  DISQUALIFIED
  INPROGRESS
  REPAIR_COST_PENDING
  DV_CLAIM_CREATED
  SUBMITTED_TO_INSURER
  NEGOTIATION
  FINAL_OFFER_MADE
  CLAIM_SETTLED
  CLAIM_PAID
  CLOSED
}

enum ClaimFlow {
  CALCULATOR_FORM
  LIABILITY_MODAL
}

enum InsuranceType {
  AUTO
  COMMERCIAL_AUTO
}

enum InsuranceCompanyType {
  SYSTEM
  CUSTOM
}

model Role {
  id        String   @id @default(cuid())
  name      String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]

  @@map("roles")
}

model User {
  id              String    @id @default(cuid())
  email           String?   @unique
  phoneNumber     String?   @unique
  countryCode     String?   @default("+1")
  firstName       String?
  lastName        String?
  password        String?
  isEmailVerified Boolean   @default(false)
  isPhoneVerified Boolean   @default(false)
  isActive        Boolean   @default(true)
  lastLoginAt     DateTime?
  roleId          String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  isBusinessUser  Boolean   @default(false)
  otps            Otp[]
  role            Role      @relation(fields: [roleId], references: [id])
  claims          Claim[]
  customerQueries CustomerQuery[]
  insuranceCompanies InsuranceCompany[]

  @@map("users")
}

model Otp {
  id        String   @id @default(cuid())
  code      String
  type      String
  isUsed    Boolean  @default(false)
  expiresAt DateTime
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("otps")
}


model CustomerQuery {
  id          String   @id @default(cuid())
  firstName   String
  lastName    String
  email       String
  phoneNumber String?
  countryCode String   @default("+1")
  message     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId String?
  user   User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId, createdAt])
  @@map("customer_queries")
}

model Review {
  id               String   @id @default(cuid())
  customerName     String
  customerInitials String?
  rating           Int
  reviewText       String
  source           String   @default("Trustpilot")
  displayOrder     Int?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("reviews")
}

model Claim {
  id          String   @id @default(cuid())
  userId      String

  // Progress tracking
  currentStep     Int      @default(1)
  status          ClaimStatus @default(INPROGRESS)  // Using enum instead of String
  flow            ClaimFlow @default(CALCULATOR_FORM)  // Track how claim was created

  lastAccessedAt  DateTime @default(now())

  // JSON fields for each step
  vehicleInfo     Json?    // Step 1: Vehicle Information
  accidentInfo    Json?    // Step 2: Accident Information
  insuranceInfo   Json?    // Step 3: Insurance Information
  pricingPlan     Json?    // Step 4: Pricing Plan
  liabilityInfo   Json?

  // Metadata
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("claims")
}

model InsuranceCompany {
  id        String   @id @default(cuid())
  companyName String @map("name")
  contactEmail String
  naic String?
  insuranceType InsuranceType
  websiteUrl String?
  companyLicensed Json?
  companyInformation String?
  userId String? // Can be null for existing system records
  type InsuranceCompanyType @default(SYSTEM) // Required field, defaults to SYSTEM

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@unique([companyName, insuranceType], name: "insurance_company_unique")
  @@index([insuranceType], name: "idx_insurance_company_type")
  @@index([userId], name: "idx_insurance_company_user")
  @@map("insurance_companies")
}

model DVCCConfiguration {
  id String @id @default(cuid())
  minApproxCarPrice         Decimal   @default(0)
  maxApproxCarPrice         Decimal   @default(100000000)
  minApproxCarPriceActive   Boolean   @default(false)
  maxApproxCarPriceActive   Boolean   @default(false)
  minTotalRepairCost        Decimal?
  minTotalRepairCostActive  Boolean   @default(false)
  maxTotalRepairCost        Decimal?
  maxTotalRepairCostActive  Boolean   @default(false)
  contingencyPlanPercentage Decimal?  @db.Decimal(5, 2)
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt

  @@map("dvcc_configurations")
}
