generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id        String   @id @default(cuid())
  name      String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]

  @@map("roles")
}

model User {
  id              String    @id @default(cuid())
  email           String?   @unique
  phoneNumber     String?   @unique
  countryCode     String?   @default("+1")
  firstName       String?
  lastName        String?
  password        String?
  isEmailVerified Boolean   @default(false)
  isPhoneVerified Boolean   @default(false)
  isActive        Boolean   @default(true)
  lastLoginAt     DateTime?
  roleId          String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  isBusinessUser  Boolean   @default(false)
  otps            Otp[]
  role            Role      @relation(fields: [roleId], references: [id])
  liabilityClaims LiabilityClaim[]
  claims          Claim[]

  @@map("users")
}

model Otp {
  id        String   @id @default(cuid())
  code      String
  type      String
  isUsed    Boolean  @default(false)
  expiresAt DateTime
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("otps")
}

model LiabilityClaim {
  id            String   @id @default(cuid())
  email         String?
  phoneNumber   String?
  countryCode   String   @default("us")
  atFaultDriver Boolean
  state         String
  agreeToEmails Boolean  @default(false)
  agreeToSms    Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([email], map: "idx_liability_claims_email")
  @@index([phoneNumber], map: "idx_liability_claims_phone_number")
  @@map("liability_claims")
}

model CustomerQuery {
  id          String   @id @default(cuid())
  firstName   String
  lastName    String
  email       String
  phoneNumber String?
  countryCode String   @default("+1")
  message     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("customer_queries")
}

model Review {
  id               String   @id @default(cuid())
  customerName     String
  customerInitials String?
  rating           Int
  reviewText       String
  source           String   @default("Trustpilot")
  displayOrder     Int?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("reviews")
}

model Claim {
  id          String   @id @default(cuid())
  userId      String

  // Progress tracking
  currentStep     Int      @default(1)
  status          String   @default("draft") // "draft" or "completed"
  lastAccessedAt  DateTime @default(now())

  // JSON fields for each step
  vehicleInfo     Json?    // Step 1: Vehicle Information
  accidentInfo    Json?    // Step 2: Accident Information
  insuranceInfo   Json?    // Step 3: Insurance Information
  pricingPlan     Json?    // Step 4: Pricing Plan

  // Metadata
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("claims")
}

model InsuranceCompany {
  id           Int      @id @default(autoincrement())
  name         String
  contactEmail String
  addedBy      String   // e.g. "system" | "user"
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("insurance_companies")
}
